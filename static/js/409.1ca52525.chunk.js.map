{"version":3,"file":"static/js/409.1ca52525.chunk.js","mappings":"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","sources":["components/Statistics/StatisticsChart.styled.js","components/Statistics/StatisticsChart.jsx","pages/StatisticsPage/StatisticsPage.styled.jsx","pages/StatisticsPage/StatisticsPage.jsx"],"sourcesContent":["import { styled } from 'styled-components';\nimport { ResponsiveContainer } from 'recharts';\n\nexport const ChartDiv = styled.div`\n  border-radius: 8px;\n  border: 1px solid rgba(220, 227, 229, 0.5);\n  width: 307px;\n  padding: 40px 14px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 135px;\n\n  @media screen and (min-width: 768px) {\n    width: 640px;\n    margin-bottom: 224px;\n    padding: 32px;\n  }\n\n  @media screen and (min-width: 1440px) {\n    width: 860px;\n    margin-bottom: 104px;\n    padding: 40px;\n  }\n`;\n\nexport const ResponsiveContainerStyled = styled(ResponsiveContainer)`\n  @media screen and (max-width: 768px) {\n    height: 243px;\n  }\n\n  @media screen and (min-width: 768px) {\n    height: 318px;\n  }\n`;\n","import {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  LabelList,\n  ResponsiveContainer,\n} from 'recharts';\nimport { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getAllTasks } from 'redux/tasks/operations';\nimport { useSearchParams } from 'react-router-dom';\nimport * as SC from './StatisticsChart.styled';\n\nconst StatisticsChart = () => {\n  const [searchParams] = useSearchParams();\n  const [monthTasks, setMonthTasks] = useState([]);\n\n  const day = searchParams.get('day');\n  const formattedDay = String(day).padStart(2, '0');\n  const month = searchParams.get('month');\n  const formattedMonth = String(month).padStart(2, '0');\n  const year = searchParams.get('year');\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!month) {\n      return;\n    }\n\n    dispatch(getAllTasks({ month: formattedMonth, year })).then(res =>\n      setMonthTasks(res.payload)\n    );\n  }, [dispatch, day, month, formattedMonth, year]);\n\n  const [toDoByMonth, setToDoByMonth] = useState();\n  const [inProgressByMonth, setInProgressByMonth] = useState();\n  const [doneByMonth, setDoneByMonth] = useState();\n\n  const [toDoByDay, setToDoByDay] = useState();\n  const [inProgressByDay, setInProgressByDay] = useState();\n  const [doneByDay, setDoneByDay] = useState();\n\n  useEffect(() => {\n    // month\n    setToDoByMonth(monthTasks.filter(task => task.category === 'to-do').length);\n\n    setInProgressByMonth(\n      monthTasks.filter(task => task.category === 'in-progress').length\n    );\n\n    setDoneByMonth(monthTasks.filter(task => task.category === 'done').length);\n\n    // day\n    setToDoByDay(\n      monthTasks.filter(\n        task =>\n          task.category === 'to-do' && task.date.split('-')[2] === formattedDay\n      ).length\n    );\n\n    setInProgressByDay(\n      monthTasks.filter(\n        task =>\n          task.category === 'in-progress' &&\n          task.date.split('-')[2] === formattedDay\n      ).length\n    );\n\n    setDoneByDay(\n      monthTasks.filter(\n        task =>\n          task.category === 'done' && task.date.split('-')[2] === formattedDay\n      ).length\n    );\n  }, [dispatch, formattedDay, month, monthTasks]);\n\n  const data = [\n    {\n      name: 'To Do',\n      ByMonth: toDoByMonth,\n      ByDay: toDoByDay,\n    },\n    {\n      name: 'In Progress',\n      ByMonth: inProgressByMonth,\n      ByDay: inProgressByDay,\n    },\n    {\n      name: 'Done',\n      ByMonth: doneByMonth,\n      ByDay: doneByDay,\n    },\n  ];\n\n  useEffect(() => {\n    const renderLabelDay = () => {\n      const allByDay = data.reduce((acc, value) => acc + value.ByDay, 0);\n\n      data.map(value => {\n        value.procentDay = `${\n          allByDay !== 0 ? parseInt((value.ByDay / allByDay) * 100) : 0\n        }%`;\n        return value.procentDay;\n      });\n    };\n\n    const renderLabelMonth = () => {\n      const allByMonth = data.reduce((acc, value) => acc + value.ByMonth, 0);\n\n      data.map(value => {\n        value.procentMonth = `${\n          allByMonth !== 0 ? parseInt((value.ByMonth / allByMonth) * 100) : 0\n        }%`;\n        return value.procentMonth;\n      });\n    };\n\n    renderLabelDay();\n    renderLabelMonth();\n  });\n\n  return (\n    <>\n      <SC.ChartDiv>\n        <ResponsiveContainer height={318}>\n          <BarChart\n            width={760}\n            height={440}\n            data={data}\n            margin={{\n              top: 40,\n              right: 0,\n              left: 0,\n              bottom: 19,\n            }}\n            fontSize={14}\n            barGap={14}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\n\n            <XAxis dataKey=\"name\" />\n            <YAxis\n              label={{\n                value: 'Tasks',\n                position: 'top',\n                dy: -24,\n                fontSize: 14,\n                fill: `var(--second-Text-Color)`,\n              }}\n            />\n            <Tooltip />\n            <Bar dataKey=\"ByDay\" fill=\"#FFD2DD\" barSize={27} fontSize={16}>\n              <LabelList dataKey=\"procentDay\" position=\"top\" />\n            </Bar>\n            <Bar dataKey=\"ByMonth\" fill=\"#3E85F3\" barSize={27} fontSize={16}>\n              <LabelList dataKey=\"procentMonth\" position=\"top\" />\n            </Bar>\n          </BarChart>\n        </ResponsiveContainer>\n      </SC.ChartDiv>\n    </>\n  );\n};\n\nexport default StatisticsChart;\n","import { styled } from 'styled-components';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\n\nexport const StatisticsDiv = styled.div`\n  font-family: 'Poppins Regular';\n  display: flex;\n  flex-direction: column;\n  gap: 40px;\n  width: 335px;\n  justify-content: centre;\n  border-radius: 16px;\n  background: var(--second-Bckg-Color);\n  padding: 28px 14px 0 14px;\n  color: var(--second-Text-Color);\n\n  @media screen and (min-width: 768px) {\n    width: 704px;\n    padding-top: 132px;\n  }\n  @media screen and (min-width: 1440px) {\n    width: 1087px;\n    padding-top: 134px;\n  }\n`;\n\nexport const StatisticsHeaderDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  width: 100%;\n\n  @media screen and (min-width: 768px) {\n    width: 576px;\n    margin-left: auto;\n    margin-right: auto;\n    flex-direction: row;\n  }\n\n  @media screen and (min-width: 1440px) {\n    width: 780px;\n  }\n`;\n\nexport const ChartLegend = styled.ul`\n  display: flex;\n  gap: 20px;\n  align-items: center;\n`;\n\nexport const ChartLegendItem = styled.li`\n  &::before {\n    content: ' ';\n    width: 10px;\n    height: 10px;\n    border-radius: 50%;\n    display: inline-block;\n    margin-right: 8px;\n  }\n  &:first-child::before {\n    background: #ffd2dd;\n  }\n  &:last-child::before {\n    background: #3e85f3;\n  }\n`;\n\nexport const PeriodPaginatorWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n\n  @media screen and (min-width: 768px) {\n    gap: 8px;\n    margin-bottom: 0;\n  }\n`;\n\nexport const CustomDatePickerWidth = styled.div`\n  > div.react-datepicker-wrapper,\n  > div\n    > div.react-datepicker__input-container\n    > div\n    > div.react-datepicker__input-container\n    input {\n    width: 200px;\n  }\n`;\n\nexport const StyledDatePicker = styled(DatePicker)`\n  color: #fff;\n  text-align: center;\n  font-family: 'Inter Bold';\n  font-size: 14px;\n  line-height: 1.13;\n  text-transform: uppercase;\n  border-radius: 8px;\n  background-color: #3e85f3;\n  padding: 8px 12px;\n  border: none;\n  cursor: pointer;\n  max-width: 100%;\n\n  &:focus {\n    outline: none;\n    box-shadow: rgba(62, 133, 243, 0.4) 0px 4px 12px;\n  }\n\n  @media screen and (min-width: 768px) {\n    font-size: 16px;\n  }\n\n  @media screen and (min-width: 1440px) {\n  }\n`;\n\nexport const ButtonGroup = styled.div`\n  display: inline-flex;\n  border: 1px solid var(--first-Input-Border-Color);\n  border-radius: 8px;\n`;\n\nexport const Button = styled.button`\n  color: #343434;\n  &:first-child {\n    border-top-left-radius: 8px;\n    border-bottom-left-radius: 8px;\n    border-right: 1px solid var(--first-Input-Border-Color);\n  }\n  &:last-child {\n    border-top-right-radius: 8px;\n    border-bottom-right-radius: 8px;\n  }\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  outline: 0px;\n  border: 0px;\n  cursor: pointer;\n  user-select: none;\n  vertical-align: middle;\n  appearance: none;\n  text-decoration: none;\n  min-width: 38px;\n  padding: 8px 12px;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  background-color: var(--second-Bckg-Color);\n  &:disabled {\n    color: #dce3e5;\n  }\n  &:hover {\n    background-color: var(--first-Bckg-Color);\n    color: var(--second-Text-Color);\n  }\n`;\n","import { useState } from 'react';\nimport { addDays } from 'date-fns';\nimport { useSearchParams } from 'react-router-dom';\nimport { SVG } from 'images';\n\nimport StatisticsChart from 'components/Statistics/StatisticsChart';\nimport * as SC from './StatisticsPage.styled';\n\nconst StatisticsPage = () => {\n  /* eslint-disable no-unused-vars */\n  const [searchParams, setSearchParams] = useSearchParams();\n  /* eslint-enable no-unused-vars */\n  const initialDate = new Date();\n\n  const [currentDate, setCurrentDate] = useState(initialDate);\n\n  const prevHandler = () => {\n    const prevDate = addDays(currentDate, -1);\n    setCurrentDate(prevDate);\n\n    setSearchParams({\n      month: prevDate.getMonth() + 1,\n      day: prevDate.getDate(),\n      year: prevDate.getFullYear(),\n    });\n  };\n\n  const nextHandler = () => {\n    const nextDate = addDays(currentDate, 1);\n    setCurrentDate(nextDate);\n\n    setSearchParams({\n      month: nextDate.getMonth() + 1,\n      day: nextDate.getDate(),\n      year: nextDate.getFullYear(),\n    });\n  };\n\n  return (\n    <>\n      <SC.StatisticsDiv>\n        <SC.StatisticsHeaderDiv>\n          <SC.PeriodPaginatorWrapper>\n            <SC.CustomDatePickerWidth>\n              <SC.StyledDatePicker\n                selected={currentDate}\n                onChange={date => {\n                  setCurrentDate(date);\n                  setSearchParams({\n                    month: date.getMonth() + 1,\n                    day: date.getDate(),\n                    year: date.getFullYear(),\n                  });\n                }}\n                dateFormat=\"dd MMMM yyyy\"\n              />\n            </SC.CustomDatePickerWidth>\n\n            <SC.ButtonGroup>\n              <SC.Button onClick={prevHandler}>\n                <SVG.LeftChevron />\n              </SC.Button>\n              <SC.Button onClick={nextHandler}>\n                <SVG.RightChevron />\n              </SC.Button>\n            </SC.ButtonGroup>\n          </SC.PeriodPaginatorWrapper>\n\n          <SC.ChartLegend>\n            <SC.ChartLegendItem>By day</SC.ChartLegendItem>\n            <SC.ChartLegendItem>By Month</SC.ChartLegendItem>\n          </SC.ChartLegend>\n        </SC.StatisticsHeaderDiv>\n\n        <StatisticsChart />\n      </SC.StatisticsDiv>\n    </>\n  );\n};\n\nexport default StatisticsPage;\n"],"names":["ChartDiv","styled","_templateObject","_taggedTemplateLiteral","ResponsiveContainer","_templateObject2","_useSearchParams","useSearchParams","searchParams","_slicedToArray","_useState","useState","_useState2","monthTasks","setMonthTasks","day","get","formattedDay","String","padStart","month","formattedMonth","year","dispatch","useDispatch","useEffect","getAllTasks","then","res","payload","_useState3","_useState4","toDoByMonth","setToDoByMonth","_useState5","_useState6","inProgressByMonth","setInProgressByMonth","_useState7","_useState8","doneByMonth","setDoneByMonth","_useState9","_useState10","toDoByDay","setToDoByDay","_useState11","_useState12","inProgressByDay","setInProgressByDay","_useState13","_useState14","doneByDay","setDoneByDay","filter","task","category","length","date","split","data","name","ByMonth","ByDay","allByDay","reduce","acc","value","map","procentDay","concat","parseInt","renderLabelDay","allByMonth","procentMonth","renderLabelMonth","_jsx","_Fragment","children","SC","height","_jsxs","BarChart","width","margin","top","right","left","bottom","fontSize","barGap","CartesianGrid","strokeDasharray","vertical","XAxis","dataKey","YAxis","label","position","dy","fill","Tooltip","Bar","barSize","LabelList","StatisticsDiv","StatisticsHeaderDiv","ChartLegend","_templateObject3","ChartLegendItem","_templateObject4","PeriodPaginatorWrapper","_templateObject5","CustomDatePickerWidth","_templateObject6","StyledDatePicker","DatePicker","_templateObject7","ButtonGroup","_templateObject8","Button","_templateObject9","_useSearchParams2","setSearchParams","initialDate","Date","currentDate","setCurrentDate","selected","onChange","getMonth","getDate","getFullYear","dateFormat","onClick","prevDate","addDays","SVG","nextDate","StatisticsChart"],"sourceRoot":""}