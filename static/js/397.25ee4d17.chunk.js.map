{"version":3,"file":"static/js/397.25ee4d17.chunk.js","mappings":"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","sources":["components/temp1/LoginForm.jsx","pages/LoginPage/LoginPage.styled.jsx","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { useState } from 'react';\nimport * as SC from './RegisterLoginForm.styled';\nimport { login } from 'redux/auth/operations';\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { SVG } from 'images';\nimport { Loader } from 'components/Loader/Loader';\nimport useAuth from 'hooks/useAuth';\nimport { toast } from 'react-hot-toast';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#8D9698',\n    },\n  },\n});\n\nconst LoginSchema = Yup.object().shape({\n  email: Yup.string()\n    .email('This is an ERROR email')\n    .required('Please enter your email')\n    .matches(/^[a-z0-9.]+@[a-z]+\\.[a-z]{2,3}$/),\n  password: Yup.string()\n    .min(8, 'Need to be more than 8 symbols!')\n    .required('Please enter your password')\n    .matches(/^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,30}$/),\n});\n\nconst LoginForm = () => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const [noUser, setNoUser] = useState(false);\n  const [visibility, setVisibility] = useState(false);\n  const { isLoading, isLoggedIn, error } = useAuth();\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  const handleSubmit = (values, { resetForm }) => {\n    setIsSubmitted(true);\n    dispatch(login({ email: values.email, password: values.password }));\n    if (isLoggedIn) {\n      resetForm();\n      navigate('/calendar');\n    }\n  };\n\n  useEffect(() => {\n    if (error.status&&isSubmitted) {\n      if (error.status === 401 || error.status === 403) {\n        setNoUser(true);\n      } else {\n        toast(error.message)\n      }\n    } \n  }, [error.message, error.status, isSubmitted]);\n\n  return (\n    <SC.StyledContainer>\n      <SC.StyledHeader>Log In</SC.StyledHeader>\n      <Formik\n        initialValues={{\n          email: '',\n          password: '',\n        }}\n        validateOnChange={false}\n        validateOnBlur={true}\n        validationSchema={LoginSchema}\n        onSubmit={handleSubmit}\n      >\n        {({ errors, touched }) => {\n          return (\n            <>\n              {isLoading && <Loader />}\n              <SC.StyledForm>\n                <SC.StyledFormDiv>\n                  <SC.Styledlabel\n                    htmlFor=\"email\"\n                    $validate={\n                      (errors.email === 'Please enter your email' &&\n                        touched.email &&\n                        'empty') ||\n                      (((errors.email &&\n                        (errors.email === 'This is an ERROR email' ||\n                          errors.email.includes('match'))) ||\n                        noUser) &&\n                        'error') ||\n                      (touched.email && 'okay')\n                    }\n                  >\n                    Email\n                  </SC.Styledlabel>\n                  <SC.StyledFieldContainer\n                    $validate={\n                      (errors.email === 'Please enter your email' &&\n                        touched.email &&\n                        'empty') ||\n                      (((errors.email &&\n                        (errors.email === 'This is an ERROR email' ||\n                          errors.email.includes('match'))) ||\n                        noUser) &&\n                        'error') ||\n                      (touched.email && 'okay')\n                    }\n                  >\n                    <SC.StyledField\n                      name=\"email\"\n                      type=\"email\"\n                      placeholder=\"nadiia@gmail.com\"\n                    />\n                    {((errors.email &&\n                      (errors.email === 'This is an ERROR email' ||\n                        errors.email.includes('match'))) ||\n                      noUser) && (\n                      <SC.StyledIcon>\n                        <SVG.ErrorAuth />\n                      </SC.StyledIcon>\n                    )}\n                    {touched.email && !errors.email && !noUser && (\n                      <SC.StyledIcon>\n                        <SVG.GoodAuth />\n                      </SC.StyledIcon>\n                    )}\n                  </SC.StyledFieldContainer>\n\n                  {(errors.email === 'Please enter your email' &&\n                    touched.email && (\n                      <SC.StyledRequired>{errors.email}</SC.StyledRequired>\n                    )) ||\n                    (errors.email &&\n                      (errors.email === 'This is an ERROR email' ||\n                        errors.email.includes('match')) && (\n                        <SC.StyledError>This is an ERROR email</SC.StyledError>\n                      )) ||\n                    (noUser && (\n                      <SC.StyledError>\n                        Email or password is uncorrect\n                      </SC.StyledError>\n                    )) ||\n                    (touched.email && (\n                      <SC.StyledCorrect>\n                        This is an CORRECT email\n                      </SC.StyledCorrect>\n                    ))}\n                </SC.StyledFormDiv>\n                <SC.StyledFormDiv>\n                  <SC.Styledlabel\n                    htmlFor=\"password\"\n                    $validate={\n                      (errors.password === 'Please enter your password' &&\n                        touched.password &&\n                        'empty') ||\n                      (((errors.password && touched.password) || noUser) &&\n                        'error') ||\n                      (touched.password && 'okay')\n                    }\n                  >\n                    Password\n                  </SC.Styledlabel>\n                  <SC.StyledFieldContainer\n                    $validate={\n                      (errors.password === 'Please enter your password' &&\n                        touched.password &&\n                        'empty') ||\n                      (((errors.password && touched.password) || noUser) &&\n                        'error') ||\n                      (touched.password && 'okay')\n                    }\n                  >\n                    <SC.StyledField\n                      name=\"password\"\n                      type={!visibility ? 'password' : 'text'}\n                      placeholder=\"• • • • • • •\"\n                    />\n                    <SC.StyledButtonVisibility\n                      type=\"button\"\n                      onClick={() => {\n                        setVisibility(!visibility);\n                      }}\n                    >\n                      <ThemeProvider theme={theme}>\n                        {!visibility ? (\n                          <Visibility color=\"primary\" />\n                        ) : (\n                          <VisibilityOff color=\"primary\" />\n                        )}\n                      </ThemeProvider>\n                    </SC.StyledButtonVisibility>\n                  </SC.StyledFieldContainer>\n                  {(errors.password === 'Please enter your password' &&\n                    touched.password && (\n                      <SC.StyledRequired>{errors.password}</SC.StyledRequired>\n                    )) ||\n                    (errors.password &&\n                      errors.password.includes(\n                        'password must match the following'\n                      ) &&\n                      touched.password && (\n                        <SC.StyledErrorPassword>\n                          Password should contain at least 1 number and 1 letter\n                        </SC.StyledErrorPassword>\n                      )) ||\n                    (errors.password && touched.password && (\n                      <SC.StyledError>{errors.password}</SC.StyledError>\n                    )) ||\n                    (noUser && (\n                      <SC.StyledError>\n                        Email or password is uncorrect\n                      </SC.StyledError>\n                    )) ||\n                    (touched.password && (\n                      <SC.StyledCorrect>\n                        This is an CORRECT password\n                      </SC.StyledCorrect>\n                    ))}\n                </SC.StyledFormDiv>\n                <SC.StyledButton type=\"submit\">\n                  Log In\n                  <SVG.LoginWhiteIcon />\n                </SC.StyledButton>\n              </SC.StyledForm>\n            </>\n          );\n        }}\n      </Formik>\n    </SC.StyledContainer>\n  );\n};\n\nexport default LoginForm;\n","import styled from 'styled-components';\n\nexport const StyledLayout = styled.div`\n  margin: 0 auto;\n  width: 100%;\n  height: 100vh;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background: var(--LogReg-Bckg-Color);\n  position: relative;\n`;\n\nexport const StyledSharedContainer = styled.div`\n  position: absolute;\n  top: 50%;              \n  left: 50%;         \n  width: 100%;\n  padding: 0 15px;       \n  transform: translate(-50%, -50%);\n  margin: 0 auto;\n`\n\nexport const StyledPicture = styled.picture`\n  position: absolute;\n  bottom: 19px;\n  right: 60px;\n`\n\nexport const StyledImg = styled.img`\n  display:none;\n  @media (min-width: 1440px) {\n    display:block;\n  }\n`","import { IMG } from 'images';\nimport { AuthNavigate } from 'components/temp/AuthNavigate';\nimport LoginForm from 'components/temp1/LoginForm';\nimport * as SC from './LoginPage.styled';\n\nconst LoginPage = () => {\n  return (\n    <SC.StyledLayout>\n      <SC.StyledSharedContainer>\n        <LoginForm />\n        <AuthNavigate path=\"/register\" text=\"Sign Up\" />\n      </SC.StyledSharedContainer>\n      <SC.StyledPicture>\n        <source\n          srcSet={`${IMG.loginx1} 1x, ${IMG.loginx2} 2x`}\n          type=\"image/jpg\"\n          media=\"(min-width: 1440px)\"\n        />\n        <SC.StyledImg\n          srcSet={`${IMG.loginx1} 1x, ${IMG.loginx2} 2x`}\n          alt=\"Quickly come in and write down your tasks for the day!\"\n        />\n      </SC.StyledPicture>\n    </SC.StyledLayout>\n  );\n};\n\nexport default LoginPage;\n"],"names":["theme","createTheme","palette","primary","main","LoginSchema","Yup","shape","email","required","matches","password","min","navigate","useNavigate","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","noUser","setNoUser","_useState3","_useState4","visibility","setVisibility","_useAuth","useAuth","isLoading","isLoggedIn","error","_useState5","_useState6","isSubmitted","setIsSubmitted","useEffect","status","toast","message","_jsxs","SC","children","_jsx","Formik","initialValues","validateOnChange","validateOnBlur","validationSchema","onSubmit","values","_ref","resetForm","login","_ref2","errors","touched","_Fragment","Loader","htmlFor","$validate","includes","name","type","placeholder","SVG","onClick","ThemeProvider","VisibilityOff","color","Visibility","StyledLayout","styled","_templateObject","_taggedTemplateLiteral","StyledSharedContainer","_templateObject2","StyledPicture","_templateObject3","StyledImg","_templateObject4","LoginForm","AuthNavigate","path","text","srcSet","concat","IMG","media","alt"],"sourceRoot":""}