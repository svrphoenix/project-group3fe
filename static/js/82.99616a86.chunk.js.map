{"version":3,"file":"static/js/82.99616a86.chunk.js","mappings":"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","sources":["components/registerLoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.styled.jsx","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import React from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { useState } from 'react';\nimport {\n    StyledButton,\n    StyledContainer,\n    StyledError,\n    StyledField,\n    StyledFieldPasswordLogin,\n    StyledForm,\n    StyledFormDiv,\n    StyledHeader,\n    Styledlabel,\n    StyledRequired,\n} from './RegisterLoginForm.styled';\nimport { login } from 'redux/auth/operations';\nimport { SVG } from 'images';\n\nconst LoginSchema = Yup.object().shape({\n  email: Yup.string()\n    .email('This is an ERROR email')\n    .required('Please enter your email')\n    .matches(/^[a-z0-9.]+@[a-z]+\\.[a-z]{2,3}$/),\n  password: Yup.string()\n    .min(8, 'Need to be more than 8 symbols!')\n    .required('Please enter your password')\n    .matches(/^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,30}$/),\n});\n\nconst LoginForm = () => {\n    const navigate = useNavigate();\n    const dispatch = useDispatch();\n    const [noUser, setNoUser] = useState(false);\n\n    return  (<StyledContainer>\n        <StyledHeader>Log In</StyledHeader>\n        <Formik\n            initialValues={{\n                email: '',\n                password: '',\n            }}\n            validateOnChange={false}\n            validateOnBlur={true}\n            validationSchema={LoginSchema}\n            onSubmit={async (values, { resetForm }) => {\n                try {\n                    const response = await dispatch(\n                        login({\n                            email: values.email,\n                            password: values.password,\n                        }));\n                    if (response.meta.requestStatus !== \"rejected\") {\n                        resetForm();\n                        navigate(\"/calendar\");\n                    } else {\n                        if (response.payload.includes(\"401\")) {\n                            setNoUser(true);\n                        }\n                    }\n                } catch (error) {\n                    alert(\"Sorry, problem at server\")\n                }\n        \n            }}\n        >\n            {({ errors, touched }) => {\n                return (\n                    <StyledForm>\n                        <StyledFormDiv>\n                            <Styledlabel\n                                htmlFor=\"email\"\n                                $validate={\n                                    (errors.email === 'Please enter your email' &&\n                                        touched.email &&\n                                        'empty') ||\n                                    (((errors.email && (errors.email === \"This is an ERROR email\" || errors.email.includes(\"match\")))||noUser) && 'error') ||\n                                    (touched.email && 'okay')\n                                }\n                            >\n                                Email\n                            </Styledlabel>\n                            <StyledField\n                                name=\"email\"\n                                type=\"email\"\n                                placeholder=\"nadiia@gmail.com\"\n                                $validate={\n                                    (errors.email === 'Please enter your email' &&\n                                        touched.email &&\n                                        'empty') ||\n                                    (((errors.email && (errors.email === \"This is an ERROR email\" || errors.email.includes(\"match\")))||noUser) && 'error') ||\n                                    (touched.email && 'okay')\n                                }\n                            />\n                            {(errors.email === 'Please enter your email' && touched.email && (\n                                <StyledRequired>{errors.email}</StyledRequired>\n                            )) ||\n                                (errors.email && (errors.email === \"This is an ERROR email\" || errors.email.includes(\"match\")) && (\n                                    <StyledError>This is an ERROR email</StyledError>\n                            )) ||\n                            (noUser && (\n                                 <StyledError>Email or password is uncorrect</StyledError>\n                            ))}\n                        </StyledFormDiv>\n                        <StyledFormDiv>\n                            <Styledlabel\n                                htmlFor=\"password\"\n                                $validate={\n                                    (errors.password === 'Please enter your password' &&\n                                        touched.password &&\n                                        'empty') ||\n                                    (((errors.password && touched.password)||noUser) && 'error') ||\n                                    (touched.password && 'okay')\n                                }\n                            >\n                                Password\n                            </Styledlabel>\n                            <StyledFieldPasswordLogin\n                                name=\"password\"\n                                type=\"password\"\n                                placeholder=\"•••••••\"\n                                $validate={\n                                    (errors.password === 'Please enter your password' &&\n                                        touched.password &&\n                                        'empty') ||\n                                    (((errors.password && touched.password)||noUser) && 'error') ||\n                                    (touched.password && 'okay')\n                                }\n                            />\n                            {(errors.password === 'Please enter your password' &&\n                                touched.password && (\n                                    <StyledRequired>{errors.password}</StyledRequired>\n                                )) ||\n                                (errors.password && errors.password.includes('password must match the following') && touched.password && (\n                                    <StyledError>This password should contain  at least eight characters and at least one number and one letter</StyledError>\n                                )) ||\n                                (errors.password && touched.password && (\n                                    <StyledError>{errors.password}</StyledError>\n                                )) || (noUser && (\n                                <StyledError>Email or password is uncorrect</StyledError>\n                                ))\n                            }\n                        </StyledFormDiv>\n                        <StyledButton type=\"submit\">Log In\n                            <SVG.LoginWhiteIcon />\n                        </StyledButton>\n                    </StyledForm>\n                );\n            }}\n        </Formik>\n    </StyledContainer>)\n};\n\nexport default LoginForm;","import styled from 'styled-components';\n\nexport const StyledLayout = styled.div`\n  margin: 0 auto;\n  width: 100%;\n  padding: 155px 15px 156px 15px;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background: #dcebf7;\n  @media (min-width: 768px) {\n    padding-top: 227px;\n  }\n  @media (min-width: 1440px) {\n    padding-top: 124px;\n  }\n`;","import { AuthNavigate } from 'components/authNavigate/AuthNavigate';\nimport LoginForm from 'components/registerLoginForm/LoginForm';\nimport { StyledLayout } from './LoginPage.styled';\n\nconst LoginPage = () => {\n  return (\n    <StyledLayout>\n      <LoginForm />\n      <AuthNavigate path=\"/register\" text=\"Sign Up\"/>\n    </StyledLayout>\n      \n  );\n};\n\nexport default LoginPage;"],"names":["LoginSchema","Yup","shape","email","required","matches","password","min","navigate","useNavigate","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","noUser","setNoUser","_jsxs","StyledContainer","children","_jsx","StyledHeader","Formik","initialValues","validateOnChange","validateOnBlur","validationSchema","onSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","_ref","resetForm","response","wrap","_context","prev","next","login","sent","meta","requestStatus","payload","includes","t0","alert","stop","_x","_x2","apply","arguments","_ref3","errors","touched","StyledForm","StyledFormDiv","Styledlabel","htmlFor","$validate","StyledField","name","type","placeholder","StyledRequired","StyledError","StyledFieldPasswordLogin","StyledButton","SVG","StyledLayout","styled","_templateObject","_taggedTemplateLiteral","LoginForm","AuthNavigate","path","text"],"sourceRoot":""}