{"version":3,"file":"static/js/492.1013d600.chunk.js","mappings":"+VA2BMA,GAAQC,EAAAA,EAAAA,GAAY,CACxBC,QAAS,CACPC,QAAS,CACPC,KAAM,cAKNC,EAAeC,EAAAA,KAAaC,MAAM,CACtCC,KAAMF,EAAAA,KACHG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,0BACZC,MAAON,EAAAA,KACJM,MAAM,0BACND,SAAS,2BACTE,QAAQ,mCACXC,SAAUR,EAAAA,KACPG,IAAI,EAAG,mCACPE,SAAS,8BACTE,QAAQ,8CAgLb,EA7KqB,WACjB,IAAME,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACjBC,GAAkCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1CI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BI,GAAoCL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA5CE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCG,GAAkCT,EAAAA,EAAAA,WAAS,GAAMU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAE9B,OAAQG,EAAAA,EAAAA,MAACC,EAAAA,GAAe,CAAAC,SAAA,EACpBC,EAAAA,EAAAA,KAACC,EAAAA,GAAY,CAAAF,SAAC,aACdC,EAAAA,EAAAA,KAACE,EAAAA,GAAM,CACHC,cAAe,CACX/B,KAAM,GACNI,MAAO,GACPE,SAAU,IAEd0B,kBAAkB,EAClBC,gBAAgB,EAChBC,iBAAkBrC,EAClBsC,SAAQ,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAE,SAAAC,EAAOC,EAAMC,GAAA,IAAAC,EAAAC,EAAA,OAAAN,EAAAA,EAAAA,KAAAO,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEI,OAFAL,EAASD,EAATC,UAASG,EAAAC,KAAA,EAE5BvB,GAAa,GAAMsB,EAAAE,KAAA,EACIvC,GACnBwC,EAAAA,EAAAA,IAAS,CACLjD,KAAMyC,EAAOzC,KACbI,MAAOqC,EAAOrC,MACdE,SAAUmC,EAAOnC,YACjB,KAAD,EAC6B,cAN9BsC,EAAQE,EAAAI,MAMDC,KAAKC,eACdT,IACApC,EAAS,cAELqC,EAASS,QAAQC,SAAS,QAC1BtC,GAAa,GAGrBQ,GAAa,GAAOsB,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAS,GAAAT,EAAA,SAEpBtB,GAAa,GACbgC,MAAM,4BAA4B,yBAAAV,EAAAW,OAAA,GAAAjB,EAAA,mBAGzC,gBAAAkB,EAAAC,GAAA,OAAAvB,EAAAwB,MAAA,KAAAC,UAAA,EAvBO,GAuBNlC,SAED,SAAAmC,GAA0B,IAAvBC,EAAMD,EAANC,OAAQC,EAAOF,EAAPE,QACR,OAAIzC,GACOK,EAAAA,EAAAA,KAACqC,EAAAA,EAAM,KAGVxC,EAAAA,EAAAA,MAACyC,EAAAA,GAAU,CAAAvC,SAAA,EACPF,EAAAA,EAAAA,MAAC0C,EAAAA,GAAa,CAAAxC,SAAA,EACVC,EAAAA,EAAAA,KAACwC,EAAAA,GAAW,CACRC,QAAQ,OACRC,WACqB,2BAAhBP,EAAO/D,MACJgE,EAAQhE,KACR,QACH+D,EAAO/D,MAAQgE,EAAQhE,MAAQ,UAC/BgE,EAAQhE,MAAQ,OACpB2B,SACJ,UAGDC,EAAAA,EAAAA,KAAC2C,EAAAA,GAAW,CACRvE,KAAK,OACLwE,YAAY,kBACZF,WACqB,2BAAhBP,EAAO/D,MACJgE,EAAQhE,KACR,QACH+D,EAAO/D,MAAQgE,EAAQhE,MAAQ,UAC/BgE,EAAQhE,MAAQ,SAGP,2BAAhB+D,EAAO/D,MAAqCgE,EAAQhE,OAClD4B,EAAAA,EAAAA,KAAC6C,EAAAA,GAAc,CAAA9C,SAAEoC,EAAO/D,QAEvB+D,EAAO/D,MAAQgE,EAAQhE,OACpB4B,EAAAA,EAAAA,KAAC8C,EAAAA,GAAW,CAAA/C,SAAEoC,EAAO/D,QAClBgE,EAAQhE,OACX4B,EAAAA,EAAAA,KAAC+C,EAAAA,GAAa,CAAAhD,SAAC,gCAE3BF,EAAAA,EAAAA,MAAC0C,EAAAA,GAAa,CAAAxC,SAAA,EACVC,EAAAA,EAAAA,KAACwC,EAAAA,GAAW,CACRC,QAAQ,QACRC,WACsB,4BAAjBP,EAAO3D,OACJ4D,EAAQ5D,MACR,SACD2D,EAAO3D,QAA2B,2BAAjB2D,EAAO3D,OAAsC2D,EAAO3D,MAAMkD,SAAS,WAAcvC,IAAc,UAClHiD,EAAQ5D,OAAS,OACrBuB,SACJ,WAGDC,EAAAA,EAAAA,KAAC2C,EAAAA,GAAW,CACRvE,KAAK,QACL4E,KAAK,QACLJ,YAAY,cACZF,WACsB,4BAAjBP,EAAO3D,OACJ4D,EAAQ5D,MACR,SACD2D,EAAO3D,QAA2B,2BAAjB2D,EAAO3D,OAAsC2D,EAAO3D,MAAMkD,SAAS,WAAcvC,IAAc,UAClHiD,EAAQ5D,OAAS,SAGP,4BAAjB2D,EAAO3D,OAAuC4D,EAAQ5D,QACpDwB,EAAAA,EAAAA,KAAC6C,EAAAA,GAAc,CAAA9C,SAAEoC,EAAO3D,SAEvB2D,EAAO3D,QAA2B,2BAAjB2D,EAAO3D,OAAsC2D,EAAO3D,MAAMkD,SAAS,YACjF1B,EAAAA,EAAAA,KAAC8C,EAAAA,GAAW,CAAA/C,SAAC,4BAEhBZ,IACGa,EAAAA,EAAAA,KAAC8C,EAAAA,GAAW,CAAA/C,SAAC,gCACVqC,EAAQ5D,QACXwB,EAAAA,EAAAA,KAAC+C,EAAAA,GAAa,CAAAhD,SAAC,iCAE3BF,EAAAA,EAAAA,MAAC0C,EAAAA,GAAa,CAAAxC,SAAA,EACVC,EAAAA,EAAAA,KAACwC,EAAAA,GAAW,CACRC,QAAQ,WACRC,WACyB,+BAApBP,EAAOzD,UACJ0D,EAAQ1D,SACR,QACHyD,EAAOzD,UAAY0D,EAAQ1D,UAAY,UACvC0D,EAAQ1D,UAAY,OACxBqB,SACJ,cAGDF,EAAAA,EAAAA,MAACoD,EAAAA,GAAuB,CAACP,WACA,+BAApBP,EAAOzD,UACJ0D,EAAQ1D,SACR,QACHyD,EAAOzD,UAAY0D,EAAQ1D,UAAY,UACvC0D,EAAQ1D,UAAY,OACxBqB,SAAA,EACGC,EAAAA,EAAAA,KAACkD,EAAAA,GAAmB,CAChB9E,KAAK,WACL4E,KAAOzD,EAA0B,OAAb,WACpBqD,YAAY,oBAEhB5C,EAAAA,EAAAA,KAACmD,EAAAA,GAAsB,CAACH,KAAK,SAASI,QAAS,WAAQ5D,GAAeD,EAAY,EAAEQ,UAChFC,EAAAA,EAAAA,KAACqD,EAAAA,EAAa,CAACzF,MAAOA,EAAMmC,SACtBR,GAA8CS,EAAAA,EAAAA,KAACsD,EAAAA,EAAa,CAACC,MAAM,aAAtDvD,EAAAA,EAAAA,KAACwD,EAAAA,EAAU,CAACD,MAAM,mBAIvB,+BAApBpB,EAAOzD,UACL0D,EAAQ1D,WACJsB,EAAAA,EAAAA,KAAC6C,EAAAA,GAAc,CAAA9C,SAAEoC,EAAOzD,YAE3ByD,EAAOzD,UAAYyD,EAAOzD,SAASgD,SAAS,sCAAwCU,EAAQ1D,WACzFsB,EAAAA,EAAAA,KAAC8C,EAAAA,GAAW,CAAA/C,SAAC,oGAEhBoC,EAAOzD,UAAY0D,EAAQ1D,WACxBsB,EAAAA,EAAAA,KAAC8C,EAAAA,GAAW,CAAA/C,SAAEoC,EAAOzD,YAClB0D,EAAQ1D,WACXsB,EAAAA,EAAAA,KAAC+C,EAAAA,GAAa,CAAAhD,SAAC,oCAG3BF,EAAAA,EAAAA,MAAC4D,EAAAA,GAAY,CAACT,KAAK,SAAQjD,SAAA,CAAC,WACxBC,EAAAA,EAAAA,KAAC0D,EAAAA,EAAAA,eAAkB,SAKvC,MAGZ,E,SC1NaC,E,QAAeC,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,kTCatC,EATqB,WACnB,OACEjE,EAAAA,EAAAA,MAAC8D,EAAY,CAAA5D,SAAA,EACXC,EAAAA,EAAAA,KAAC+D,EAAY,KACb/D,EAAAA,EAAAA,KAACgE,EAAAA,EAAY,CAACC,KAAK,SAASC,KAAK,aAGvC,C","sources":["components/registerLoginForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.styled.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import React from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { useState } from 'react';\nimport {\n    StyledButton,\n    StyledButtonVisibility,\n    StyledContainer,\n    StyledContainerPassword,\n    StyledCorrect,\n    StyledError,\n    StyledField,\n    StyledFieldPassword,\n    StyledForm,\n    StyledFormDiv,\n    StyledHeader,\n    Styledlabel,\n    StyledRequired,\n} from './RegisterLoginForm.styled';\nimport { register } from 'redux/auth/operations';\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { SVG } from 'images';\nimport { Loader } from 'components/Loader/Loader';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#8D9698'\n    }\n  },\n});\n\nconst SignupSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(3, 'Too Short!')\n    .max(20, 'Too Long!')\n    .required('Please enter your name'),\n  email: Yup.string()\n    .email('This is an ERROR email')\n    .required('Please enter your email')\n    .matches(/^[a-z0-9.]+@[a-z]+\\.[a-z]{2,3}$/),\n  password: Yup.string()\n    .min(8, 'Need to be more than 8 symbols!')\n    .required('Please enter your password')\n    .matches(/^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,30}$/),\n});\n\nconst RegisterForm = () => {\n    const navigate = useNavigate();\n    const dispatch = useDispatch();\n    const [usedEmail, setUsedEmail] = useState(false);\n    const [visibility, setVisibility] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n\n    return (<StyledContainer>\n        <StyledHeader>Sign Up</StyledHeader>\n        <Formik\n            initialValues={{\n                name: '',\n                email: '',\n                password: '',\n            }}\n            validateOnChange={false}\n            validateOnBlur={true}\n            validationSchema={SignupSchema}\n            onSubmit={async (values, { resetForm }) => {\n                try {\n                    setIsLoading(true);\n                    const response = await dispatch(\n                        register({\n                            name: values.name,\n                            email: values.email,\n                            password: values.password,\n                        }));\n                    if (response.meta.requestStatus !== \"rejected\") {\n                        resetForm();\n                        navigate(\"/calendar\");\n                    } else {\n                        if (response.payload.includes(\"409\")) {\n                            setUsedEmail(true);\n                        }\n                    }\n                    setIsLoading(false);\n                } catch (error) {\n                    setIsLoading(false);\n                    alert(\"Sorry, problem at server\");\n                }\n        \n            }}\n        >\n            {({ errors, touched }) => {\n                if (isLoading) {\n                    return <Loader />\n                } else {\n                    return (\n                        <StyledForm>\n                            <StyledFormDiv>\n                                <Styledlabel\n                                    htmlFor=\"name\"\n                                    $validate={\n                                        (errors.name === 'Please enter your name' &&\n                                            touched.name &&\n                                            'empty') ||\n                                        (errors.name && touched.name && 'error') ||\n                                        (touched.name && 'okay')\n                                    }\n                                >\n                                    Name\n                                </Styledlabel>\n                                <StyledField\n                                    name=\"name\"\n                                    placeholder=\"Enter your name\"\n                                    $validate={\n                                        (errors.name === 'Please enter your name' &&\n                                            touched.name &&\n                                            'empty') ||\n                                        (errors.name && touched.name && 'error') ||\n                                        (touched.name && 'okay')\n                                    }\n                                />\n                                {(errors.name === 'Please enter your name' && touched.name && (\n                                    <StyledRequired>{errors.name}</StyledRequired>\n                                )) ||\n                                    (errors.name && touched.name && (\n                                        <StyledError>{errors.name}</StyledError>\n                                    )) || (touched.name &&\n                                        <StyledCorrect>This is an CORRECT name</StyledCorrect>)}\n                            </StyledFormDiv>\n                            <StyledFormDiv>\n                                <Styledlabel\n                                    htmlFor=\"email\"\n                                    $validate={\n                                        (errors.email === 'Please enter your email' &&\n                                            touched.email &&\n                                            'empty') ||\n                                        (((errors.email && (errors.email === \"This is an ERROR email\" || errors.email.includes(\"match\"))) || usedEmail) && 'error') ||\n                                        (touched.email && 'okay')\n                                    }\n                                >\n                                    Email\n                                </Styledlabel>\n                                <StyledField\n                                    name=\"email\"\n                                    type=\"email\"\n                                    placeholder=\"Enter email\"\n                                    $validate={\n                                        (errors.email === 'Please enter your email' &&\n                                            touched.email &&\n                                            'empty') ||\n                                        (((errors.email && (errors.email === \"This is an ERROR email\" || errors.email.includes(\"match\"))) || usedEmail) && 'error') ||\n                                        (touched.email && 'okay')\n                                    }\n                                />\n                                {(errors.email === 'Please enter your email' && touched.email && (\n                                    <StyledRequired>{errors.email}</StyledRequired>\n                                )) ||\n                                    (errors.email && (errors.email === \"This is an ERROR email\" || errors.email.includes(\"match\")) && (\n                                        <StyledError>This is an ERROR email</StyledError>\n                                    )) ||\n                                    (usedEmail && (\n                                        <StyledError>This user is already exist</StyledError>\n                                    )) || (touched.email &&\n                                        <StyledCorrect>This is an CORRECT email</StyledCorrect>)}\n                            </StyledFormDiv>\n                            <StyledFormDiv >\n                                <Styledlabel\n                                    htmlFor=\"password\"\n                                    $validate={\n                                        (errors.password === 'Please enter your password' &&\n                                            touched.password &&\n                                            'empty') ||\n                                        (errors.password && touched.password && 'error') ||\n                                        (touched.password && 'okay')\n                                    }\n                                >\n                                    Password\n                                </Styledlabel>\n                                <StyledContainerPassword $validate={\n                                    (errors.password === 'Please enter your password' &&\n                                        touched.password &&\n                                        'empty') ||\n                                    (errors.password && touched.password && 'error') ||\n                                    (touched.password && 'okay')\n                                }>\n                                    <StyledFieldPassword\n                                        name=\"password\"\n                                        type={!visibility ? \"password\" : \"text\"}\n                                        placeholder=\"Enter password\"\n                                    />\n                                    <StyledButtonVisibility type=\"button\" onClick={() => { setVisibility(!visibility) }}>\n                                        <ThemeProvider theme={theme}>\n                                            {!visibility ? <Visibility color=\"primary\" /> : <VisibilityOff color=\"primary\" />}\n                                        </ThemeProvider>\n                                    </StyledButtonVisibility>\n                                </StyledContainerPassword>\n                                {(errors.password === 'Please enter your password' &&\n                                    touched.password && (\n                                        <StyledRequired>{errors.password}</StyledRequired>\n                                    )) ||\n                                    (errors.password && errors.password.includes('password must match the following') && touched.password && (\n                                        <StyledError>This password should contain  at least eight characters and at least one number and one letter</StyledError>\n                                    )) ||\n                                    (errors.password && touched.password && (\n                                        <StyledError>{errors.password}</StyledError>\n                                    )) || (touched.password &&\n                                        <StyledCorrect>This is an CORRECT password</StyledCorrect>)\n                                }\n                            </StyledFormDiv>\n                            <StyledButton type=\"submit\">Sign Up\n                                <SVG.LoginWhiteIcon />\n                            </StyledButton>\n                        </StyledForm>\n                    );\n                }\n            }\n            }</Formik>\n    </StyledContainer>)\n}\n\n\nexport default RegisterForm;","import styled from 'styled-components';\n\nexport const StyledLayout = styled.div`\n  margin: 0 auto;\n  width: 100%;\n  padding: 155px 15px 156px 15px;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background: #dcebf7;\n  @media (min-width: 768px) {\n    padding-top: 227px;\n  }\n  @media (min-width: 1440px) {\n    padding-top: 124px;\n  }\n`;\n","\nimport { AuthNavigate } from 'components/authNavigate/AuthNavigate';\nimport RegisterForm from 'components/registerLoginForm/RegisterForm';\nimport { StyledLayout } from './RegisterPage.styled';\n\n\nconst RegisterPage = () => {\n  return (\n    <StyledLayout>\n      <RegisterForm />\n      <AuthNavigate path=\"/login\" text=\"Log In\"/>\n    </StyledLayout>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["theme","createTheme","palette","primary","main","SignupSchema","Yup","shape","name","min","max","required","email","matches","password","navigate","useNavigate","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","usedEmail","setUsedEmail","_useState3","_useState4","visibility","setVisibility","_useState5","_useState6","isLoading","setIsLoading","_jsxs","StyledContainer","children","_jsx","StyledHeader","Formik","initialValues","validateOnChange","validateOnBlur","validationSchema","onSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","_ref","resetForm","response","wrap","_context","prev","next","register","sent","meta","requestStatus","payload","includes","t0","alert","stop","_x","_x2","apply","arguments","_ref3","errors","touched","Loader","StyledForm","StyledFormDiv","Styledlabel","htmlFor","$validate","StyledField","placeholder","StyledRequired","StyledError","StyledCorrect","type","StyledContainerPassword","StyledFieldPassword","StyledButtonVisibility","onClick","ThemeProvider","VisibilityOff","color","Visibility","StyledButton","SVG","StyledLayout","styled","_templateObject","_taggedTemplateLiteral","RegisterForm","AuthNavigate","path","text"],"sourceRoot":""}