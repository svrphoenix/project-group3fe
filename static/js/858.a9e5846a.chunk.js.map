{"version":3,"file":"static/js/858.a9e5846a.chunk.js","mappings":"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","sources":["components/CalendarToolbar/PeriodPaginator/PeriodPaginator.styled.js","components/CalendarToolbar/PeriodPaginator/PeriodPaginator.jsx","components/Statistics/StatisticsChart.styled.js","components/Statistics/StatisticsChart.jsx","pages/StatisticsPage/StatisticsPage.styled.js","pages/StatisticsPage/StatisticsPage.jsx"],"sourcesContent":["const { css, styled } = require('styled-components');\n\nconst sharedStyle = css`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  outline: 0px;\n  border: 0px;\n  cursor: pointer;\n  user-select: none;\n  vertical-align: middle;\n  appearance: none;\n  text-decoration: none;\n  min-width: 38px;\n  padding: 8px 12px;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  background-color: #fff;\n  &:disabled {\n    color: #dce3e5;\n  }\n  &:hover {\n    background-color: #f8f8f8;\n  }\n`;\n\nexport const PeriodPaginatorWrapper = styled.div`\n  display: inline-flex;\n  align-items: center;\n  vertical-align: middle;\n  justify-content: space-between;\n  margin-bottom: 18px;\n  @media screen and (min-width: 768px) {\n    justify-content: initial;\n    margin-bottom: initial;\n  }\n`;\n\nexport const PeriodPaginatorDisplay = styled.div`\n  color: #fff;\n  text-align: center;\n  font-family: 'Inter Bold';\n  font-size: 16px;\n  line-height: 1.13;\n  text-transform: uppercase;\n  border-radius: 8px;\n  background-color: #3e85f3;\n  padding: 8px 12px;\n  margin-right: 8px;\n`;\n\nexport const ButtonGroup = styled.div`\n  display: inline-flex;\n  border: 1px solid rgba(220, 227, 229, 0.8);\n  border-radius: 8px;\n`;\n\nexport const Button = styled.button`\n  color: #343434;\n  &:first-child {\n    border-top-left-radius: 8px;\n    border-bottom-left-radius: 8px;\n    border-right: 1px solid rgba(220, 227, 229, 0.5);\n  }\n  &:last-child {\n    border-top-right-radius: 8px;\n    border-bottom-right-radius: 8px;\n  }\n  ${sharedStyle};\n`;\n","import { SVG } from 'images';\nimport * as SC from './PeriodPaginator.styled';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { selectUser } from 'redux/auth/selectors';\nimport { parse, parseISO } from 'date-fns';\n\nconst PeriodPaginator = ({ date, prevHandler, nextHandler }) => {\n  const { createdAt } = useSelector(selectUser);\n  return (\n    <SC.PeriodPaginatorWrapper>\n      <SC.PeriodPaginatorDisplay>{date}</SC.PeriodPaginatorDisplay>\n      <SC.ButtonGroup>\n        <SC.Button\n          disabled={parseISO(createdAt) > parse(date, 'MMMM yyyy', new Date())}\n          onClick={prevHandler}\n        >\n          <SVG.LeftChevron />\n        </SC.Button>\n        <SC.Button onClick={nextHandler}>\n          <SVG.RightChevron />\n        </SC.Button>\n      </SC.ButtonGroup>\n    </SC.PeriodPaginatorWrapper>\n  );\n};\nexport default PeriodPaginator;\n\nPeriodPaginator.propTypes = {\n  date: PropTypes.string.isRequired,\n  prevHandler: PropTypes.func.isRequired,\n  nextHandler: PropTypes.func.isRequired,\n};\n","import { styled } from 'styled-components';\n\nexport const ChartDiv = styled.div`\n  border-radius: 8px;\n  border: 1px solid rgba(220, 227, 229, 0.5);\n  width: 860px;\n  padding: 40px;\n`;\n","import {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  //   Legend,\n  LabelList,\n} from 'recharts';\nimport { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getAllTasks } from 'redux/tasks/operations';\nimport { useSearchParams } from 'react-router-dom';\nimport * as SC from './StatisticsChart.styled';\n\nconst StatisticsChart = () => {\n  const [searchParams] = useSearchParams();\n  const [monthTasks, setMonthTasks] = useState([]);\n\n  const day = searchParams.get('day');\n  const formattedDay = String(day).padStart(2, '0');\n  const month = searchParams.get('month');\n  const formattedMonth = String(month).padStart(2, '0');\n  const year = searchParams.get('year');\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!month) {\n      return;\n    }\n\n    dispatch(getAllTasks({ month: formattedMonth, year })).then(res =>\n      setMonthTasks(res.payload)\n    );\n  }, [dispatch, day, month, formattedMonth, year]);\n\n  const [toDoByMonth, setToDoByMonth] = useState();\n  const [inProgressByMonth, setInProgressByMonth] = useState();\n  const [doneByMonth, setDoneByMonth] = useState();\n\n  const [toDoByDay, setToDoByDay] = useState();\n  const [inProgressByDay, setInProgressByDay] = useState();\n  const [doneByDay, setDoneByDay] = useState();\n\n  useEffect(() => {\n    // month\n    setToDoByMonth(monthTasks.filter(task => task.category === 'to-do').length);\n\n    setInProgressByMonth(\n      monthTasks.filter(task => task.category === 'in-progress').length\n    );\n\n    setDoneByMonth(monthTasks.filter(task => task.category === 'done').length);\n\n    // day\n    setToDoByDay(\n      monthTasks.filter(\n        task =>\n          task.category === 'to-do' && task.date.split('-')[2] === formattedDay\n      ).length\n    );\n\n    setInProgressByDay(\n      monthTasks.filter(\n        task =>\n          task.category === 'in-progress' &&\n          task.date.split('-')[2] === formattedDay\n      ).length\n    );\n\n    setDoneByDay(\n      monthTasks.filter(\n        task =>\n          task.category === 'done' && task.date.split('-')[2] === formattedDay\n      ).length\n    );\n  }, [dispatch, formattedDay, month, monthTasks]);\n\n  const data = [\n    {\n      name: 'To Do',\n      ByMonth: toDoByMonth,\n      ByDay: toDoByDay,\n    },\n    {\n      name: 'In Progress',\n      ByMonth: inProgressByMonth,\n      ByDay: inProgressByDay,\n    },\n    {\n      name: 'Done',\n      ByMonth: doneByMonth,\n      ByDay: doneByDay,\n    },\n  ];\n\n  useEffect(() => {\n    const renderLabelDay = () => {\n      const allByDay = data.reduce((acc, value) => acc + value.ByDay, 0);\n\n      data.map(value => {\n        value.procentDay = `${\n          allByDay !== 0 ? parseInt((value.ByDay / allByDay) * 100) : 0\n        }%`;\n        return value.procentDay;\n      });\n    };\n\n    const renderLabelMonth = () => {\n      const allByMonth = data.reduce((acc, value) => acc + value.ByMonth, 0);\n\n      data.map(value => {\n        value.procentMonth = `${\n          allByMonth !== 0 ? parseInt((value.ByMonth / allByMonth) * 100) : 0\n        }%`;\n        return value.procentMonth;\n      });\n    };\n\n    renderLabelDay();\n    renderLabelMonth();\n  });\n\n  return (\n    <>\n      <SC.ChartDiv>\n        <BarChart\n          width={760}\n          height={440}\n          data={data}\n          margin={{\n            top: 40,\n            right: 0,\n            left: 0,\n            bottom: 19,\n          }}\n          fontSize={14}\n          fill={343434}\n          barGap={14}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\n\n          <XAxis dataKey=\"name\" />\n          <YAxis\n            label={{\n              value: 'Tasks',\n              position: 'top',\n              dy: -24,\n              fontSize: 14,\n              fill: '#343434',\n            }}\n          />\n          <Tooltip />\n          {/* <Legend\n            align=\"right\"\n            verticalAlign=\"top\"\n            iconSize=\"8\"\n            iconType=\"circle\"\n          /> */}\n          <Bar dataKey=\"ByDay\" fill=\"#FFD2DD\" barSize={27} fontSize={16}>\n            <LabelList dataKey=\"procentDay\" position=\"top\" />\n          </Bar>\n          <Bar dataKey=\"ByMonth\" fill=\"#3E85F3\" barSize={27} fontSize={16}>\n            <LabelList dataKey=\"procentMonth\" position=\"top\" />\n          </Bar>\n        </BarChart>\n      </SC.ChartDiv>\n    </>\n  );\n};\n\nexport default StatisticsChart;\n","import { styled } from 'styled-components';\n\nexport const StatisticsDiv = styled.div`\n  font-family: 'Poppins Regular';\n  display: flex;\n  flex-direction: column;\n  gap: 40px;\n  width: 860px;\n  justify-content: centre;\n`;\n\nexport const StatisticsHeaderDiv = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 780px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const ChartLegend = styled.ul`\n  display: flex;\n  gap: 20px;\n`;\n\nexport const ChartLegendItem = styled.li`\n  &::before {\n    content: ' ';\n    width: 10px;\n    height: 10px;\n    border-radius: 50%;\n    display: inline-block;\n    margin-right: 8px;\n  }\n  &:first-child::before {\n    background: #ffd2dd;\n  }\n  &:last-child::before {\n    background: #3e85f3;\n  }\n`;\n","// import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport PeriodPaginator from 'components/CalendarToolbar/PeriodPaginator/PeriodPaginator';\nimport { format, addDays } from 'date-fns';\nimport { useSearchParams } from 'react-router-dom';\n\nimport StatisticsChart from 'components/Statistics/StatisticsChart';\nimport * as SC from './StatisticsPage.styled';\n\nconst StatisticsPage = () => {\n  /* eslint-disable no-unused-vars */\n  const [searchParams, setSearchParams] = useSearchParams();\n  /* eslint-enable no-unused-vars */\n  const initialDate = new Date();\n\n  const [currentDate, setCurrentDate] = useState(initialDate);\n\n  const formatedDate = format(currentDate, 'dd MMMM yyyy');\n\n  const prevHandler = () => {\n    const prevDate = addDays(currentDate, -1);\n    setCurrentDate(prevDate);\n\n    setSearchParams({\n      month: prevDate.getMonth() + 1,\n      day: prevDate.getDate(),\n      year: prevDate.getFullYear(),\n    });\n  };\n\n  const nextHandler = () => {\n    const nextDate = addDays(currentDate, 1);\n    setCurrentDate(nextDate);\n\n    setSearchParams({\n      month: nextDate.getMonth() + 1,\n      day: nextDate.getDate(),\n      year: nextDate.getFullYear(),\n    });\n  };\n\n  return (\n    <>\n      <SC.StatisticsDiv>\n        <SC.StatisticsHeaderDiv>\n          <PeriodPaginator\n            date={formatedDate}\n            prevHandler={prevHandler}\n            nextHandler={nextHandler}\n          />\n\n          <SC.ChartLegend>\n            <SC.ChartLegendItem>By day</SC.ChartLegendItem>\n            <SC.ChartLegendItem>By Month</SC.ChartLegendItem>\n          </SC.ChartLegend>\n        </SC.StatisticsHeaderDiv>\n\n        <StatisticsChart />\n      </SC.StatisticsDiv>\n    </>\n  );\n};\n\n// StatisticsPage.propTypes = {};\n\nexport default StatisticsPage;\n"],"names":["_require","require","css","styled","sharedStyle","_templateObject","_taggedTemplateLiteral","PeriodPaginatorWrapper","div","_templateObject2","PeriodPaginatorDisplay","_templateObject3","ButtonGroup","_templateObject4","Button","button","_templateObject5","_ref","date","prevHandler","nextHandler","createdAt","useSelector","selectUser","_jsxs","SC","children","_jsx","disabled","parseISO","parse","Date","onClick","SVG","ChartDiv","_useSearchParams","useSearchParams","searchParams","_slicedToArray","_useState","useState","_useState2","monthTasks","setMonthTasks","day","get","formattedDay","String","padStart","month","formattedMonth","year","dispatch","useDispatch","useEffect","getAllTasks","then","res","payload","_useState3","_useState4","toDoByMonth","setToDoByMonth","_useState5","_useState6","inProgressByMonth","setInProgressByMonth","_useState7","_useState8","doneByMonth","setDoneByMonth","_useState9","_useState10","toDoByDay","setToDoByDay","_useState11","_useState12","inProgressByDay","setInProgressByDay","_useState13","_useState14","doneByDay","setDoneByDay","filter","task","category","length","split","data","name","ByMonth","ByDay","allByDay","reduce","acc","value","map","procentDay","concat","parseInt","renderLabelDay","allByMonth","procentMonth","renderLabelMonth","_Fragment","BarChart","width","height","margin","top","right","left","bottom","fontSize","fill","barGap","CartesianGrid","strokeDasharray","vertical","XAxis","dataKey","YAxis","label","position","dy","Tooltip","Bar","barSize","LabelList","StatisticsDiv","StatisticsHeaderDiv","ChartLegend","ChartLegendItem","_useSearchParams2","setSearchParams","initialDate","currentDate","setCurrentDate","formatedDate","format","PeriodPaginator","prevDate","addDays","getMonth","getDate","getFullYear","nextDate","StatisticsChart"],"sourceRoot":""}