{"version":3,"file":"static/js/82.70347d43.chunk.js","mappings":"8VA2BMA,GAAQC,EAAAA,EAAAA,GAAY,CACxBC,QAAS,CACPC,QAAS,CACPC,KAAM,cAKNC,EAAcC,EAAAA,KAAaC,MAAM,CACrCC,MAAOF,EAAAA,KACJE,MAAM,0BACNC,SAAS,2BACTC,QAAQ,mCACXC,SAAUL,EAAAA,KACPM,IAAI,EAAG,mCACPH,SAAS,8BACTC,QAAQ,8CAqKb,EAlKkB,WAChB,IAAMG,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACjBC,GAA4BC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAApCI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GACxBI,GAAoCL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA5CE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCG,GAAkCT,EAAAA,EAAAA,WAAS,GAAMU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAE9B,OACEG,EAAAA,EAAAA,MAACC,EAAAA,GAAe,CAAAC,SAAA,EACdC,EAAAA,EAAAA,KAACC,EAAAA,GAAY,CAAAF,SAAC,YACdC,EAAAA,EAAAA,KAACE,EAAAA,GAAM,CACLC,cAAe,CACb7B,MAAO,GACPG,SAAU,IAEZ2B,kBAAkB,EAClBC,gBAAgB,EAChBC,iBAAkBnC,EAClBoC,SAAQ,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAE,SAAAC,EAAOC,EAAMC,GAAA,IAAAC,EAAAC,EAAA,OAAAN,EAAAA,EAAAA,KAAAO,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEA,OAFIL,EAASD,EAATC,UAASG,EAAAC,KAAA,EAEhCvB,GAAa,GAAMsB,EAAAE,KAAA,EACIvC,GACrBwC,EAAAA,EAAAA,IAAM,CACJ/C,MAAOuC,EAAOvC,MACdG,SAAUoC,EAAOpC,YAEnB,KAAD,EACmC,cAN9BuC,EAAQE,EAAAI,MAMDC,KAAKC,eAChBT,IACApC,EAAS,iCAELqC,EAASS,QAAQC,SAAS,QAC5BtC,GAAU,GAGdQ,GAAa,GAAOsB,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAS,GAAAT,EAAA,SAEpBtB,GAAa,GACbgC,MAAM,4BAA4B,yBAAAV,EAAAW,OAAA,GAAAjB,EAAA,mBAErC,gBAAAkB,EAAAC,GAAA,OAAAvB,EAAAwB,MAAA,KAAAC,UAAA,EAtBO,GAsBNlC,SAED,SAAAmC,GAA0B,IAAvBC,EAAMD,EAANC,OAAQC,EAAOF,EAAPE,QACV,OAAIzC,GACKK,EAAAA,EAAAA,KAACqC,EAAAA,EAAM,KAGZxC,EAAAA,EAAAA,MAACyC,EAAAA,GAAU,CAAAvC,SAAA,EACTF,EAAAA,EAAAA,MAAC0C,EAAAA,GAAa,CAAAxC,SAAA,EACZC,EAAAA,EAAAA,KAACwC,EAAAA,GAAW,CACVC,QAAQ,QACRC,WACoB,4BAAjBP,EAAO7D,OACN8D,EAAQ9D,MACR,SACC6D,EAAO7D,QACU,2BAAjB6D,EAAO7D,OACN6D,EAAO7D,MAAMoD,SAAS,WACxBvC,IACA,UACDiD,EAAQ9D,OAAS,OACnByB,SACF,WAGDC,EAAAA,EAAAA,KAAC2C,EAAAA,GAAW,CACVC,KAAK,QACLC,KAAK,QACLC,YAAY,mBACZJ,WACoB,4BAAjBP,EAAO7D,OACN8D,EAAQ9D,MACR,SACC6D,EAAO7D,QACU,2BAAjB6D,EAAO7D,OACN6D,EAAO7D,MAAMoD,SAAS,WACxBvC,IACA,UACDiD,EAAQ9D,OAAS,SAGH,4BAAjB6D,EAAO7D,OACP8D,EAAQ9D,QACN0B,EAAAA,EAAAA,KAAC+C,EAAAA,GAAc,CAAAhD,SAAEoC,EAAO7D,SAEzB6D,EAAO7D,QACY,2BAAjB6D,EAAO7D,OACN6D,EAAO7D,MAAMoD,SAAS,YACtB1B,EAAAA,EAAAA,KAACgD,EAAAA,GAAW,CAAAjD,SAAC,4BAEhBZ,IACCa,EAAAA,EAAAA,KAACgD,EAAAA,GAAW,CAAAjD,SAAC,oCACRqC,EAAQ9D,QACb0B,EAAAA,EAAAA,KAACiD,EAAAA,GAAa,CAAAlD,SAAC,iCAErBF,EAAAA,EAAAA,MAAC0C,EAAAA,GAAa,CAAAxC,SAAA,EACZC,EAAAA,EAAAA,KAACwC,EAAAA,GAAW,CACVC,QAAQ,WACRC,WACuB,+BAApBP,EAAO1D,UACN2D,EAAQ3D,SACR,SACC0D,EAAO1D,UAAY2D,EAAQ3D,UAAaU,IACzC,UACDiD,EAAQ3D,UAAY,OACtBsB,SACF,cAGDF,EAAAA,EAAAA,MAACqD,EAAAA,GAAuB,CAACR,WACF,+BAApBP,EAAO1D,UACN2D,EAAQ3D,SACR,QACD0D,EAAO1D,UAAY2D,EAAQ3D,UAAY,UACvC2D,EAAQ3D,UAAY,OACtBsB,SAAA,EACCC,EAAAA,EAAAA,KAACmD,EAAAA,GAAmB,CAClBP,KAAK,WACLC,KAAOtD,EAA0B,OAAb,WACpBuD,YAAY,sDAEd9C,EAAAA,EAAAA,KAACoD,EAAAA,GAAsB,CAACP,KAAK,SAASQ,QAAS,WAAQ7D,GAAeD,EAAY,EAAEQ,UAClFC,EAAAA,EAAAA,KAACsD,EAAAA,EAAa,CAACxF,MAAOA,EAAMiC,SACxBR,GAA8CS,EAAAA,EAAAA,KAACuD,EAAAA,EAAa,CAACC,MAAM,aAAtDxD,EAAAA,EAAAA,KAACyD,EAAAA,EAAU,CAACD,MAAM,mBAIjB,+BAApBrB,EAAO1D,UACP2D,EAAQ3D,WACNuB,EAAAA,EAAAA,KAAC+C,EAAAA,GAAc,CAAAhD,SAAEoC,EAAO1D,YAEzB0D,EAAO1D,UACN0D,EAAO1D,SAASiD,SACd,sCAEFU,EAAQ3D,WACNuB,EAAAA,EAAAA,KAACgD,EAAAA,GAAW,CAAAjD,SAAC,mGAKhBoC,EAAO1D,UAAY2D,EAAQ3D,WAC1BuB,EAAAA,EAAAA,KAACgD,EAAAA,GAAW,CAAAjD,SAAEoC,EAAO1D,YAEtBU,IACCa,EAAAA,EAAAA,KAACgD,EAAAA,GAAW,CAAAjD,SAAC,oCACRqC,EAAQ3D,WACbuB,EAAAA,EAAAA,KAACiD,EAAAA,GAAa,CAAAlD,SAAC,oCAErBF,EAAAA,EAAAA,MAAC6D,EAAAA,GAAY,CAACb,KAAK,SAAQ9C,SAAA,CAAC,UAE1BC,EAAAA,EAAAA,KAAC2D,EAAAA,EAAAA,eAAkB,SAK7B,MAIR,E,SC5MaC,E,QAAeC,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,kTCYtC,EAVkB,WAChB,OACElE,EAAAA,EAAAA,MAAC+D,EAAY,CAAA7D,SAAA,EACXC,EAAAA,EAAAA,KAACgE,EAAS,KACVhE,EAAAA,EAAAA,KAACiE,EAAAA,EAAY,CAACC,KAAK,YAAYC,KAAK,cAI1C,C","sources":["components/registerLoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.styled.jsx","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import React from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { useState } from 'react';\nimport {\n  StyledButton,\n  StyledButtonVisibility,\n  StyledContainer,\n  StyledContainerPassword,\n  StyledCorrect,\n  StyledError,\n  StyledField,\n  StyledFieldPassword,\n  StyledForm,\n  StyledFormDiv,\n  StyledHeader,\n  Styledlabel,\n  StyledRequired,\n} from './RegisterLoginForm.styled';\nimport { login } from 'redux/auth/operations';\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { SVG } from 'images';\nimport { Loader } from 'components/Loader/Loader';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#8D9698'\n    }\n  },\n});\n\nconst LoginSchema = Yup.object().shape({\n  email: Yup.string()\n    .email('This is an ERROR email')\n    .required('Please enter your email')\n    .matches(/^[a-z0-9.]+@[a-z]+\\.[a-z]{2,3}$/),\n  password: Yup.string()\n    .min(8, 'Need to be more than 8 symbols!')\n    .required('Please enter your password')\n    .matches(/^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,30}$/),\n});\n\nconst LoginForm = () => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const [noUser, setNoUser] = useState(false);\n  const [visibility, setVisibility] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  return (\n    <StyledContainer>\n      <StyledHeader>Log In</StyledHeader>\n      <Formik\n        initialValues={{\n          email: '',\n          password: '',\n        }}\n        validateOnChange={false}\n        validateOnBlur={true}\n        validationSchema={LoginSchema}\n        onSubmit={async (values, { resetForm }) => {\n          try {\n            setIsLoading(true);\n            const response = await dispatch(\n              login({\n                email: values.email,\n                password: values.password,\n              })\n            );\n            if (response.meta.requestStatus !== 'rejected') {\n              resetForm();\n              navigate('/calendar/month/:currentDate');\n            } else {\n              if (response.payload.includes('401')) {\n                setNoUser(true);\n              }\n            }\n            setIsLoading(false);\n          } catch (error) {\n            setIsLoading(false);\n            alert('Sorry, problem at server');\n          }\n        }}\n      >\n        {({ errors, touched }) => {\n          if (isLoading) {\n            return <Loader />\n          } else {\n            return (\n              <StyledForm>\n                <StyledFormDiv>\n                  <Styledlabel\n                    htmlFor=\"email\"\n                    $validate={\n                      (errors.email === 'Please enter your email' &&\n                        touched.email &&\n                        'empty') ||\n                      (((errors.email &&\n                        (errors.email === 'This is an ERROR email' ||\n                          errors.email.includes('match'))) ||\n                        noUser) &&\n                        'error') ||\n                      (touched.email && 'okay')\n                    }\n                  >\n                    Email\n                  </Styledlabel>\n                  <StyledField\n                    name=\"email\"\n                    type=\"email\"\n                    placeholder=\"nadiia@gmail.com\"\n                    $validate={\n                      (errors.email === 'Please enter your email' &&\n                        touched.email &&\n                        'empty') ||\n                      (((errors.email &&\n                        (errors.email === 'This is an ERROR email' ||\n                          errors.email.includes('match'))) ||\n                        noUser) &&\n                        'error') ||\n                      (touched.email && 'okay')\n                    }\n                  />\n                  {(errors.email === 'Please enter your email' &&\n                    touched.email && (\n                      <StyledRequired>{errors.email}</StyledRequired>\n                    )) ||\n                    (errors.email &&\n                      (errors.email === 'This is an ERROR email' ||\n                        errors.email.includes('match')) && (\n                        <StyledError>This is an ERROR email</StyledError>\n                      )) ||\n                    (noUser && (\n                      <StyledError>Email or password is uncorrect</StyledError>\n                    )) || (touched.email &&\n                      <StyledCorrect>This is an CORRECT email</StyledCorrect>)}\n                </StyledFormDiv>\n                <StyledFormDiv>\n                  <Styledlabel\n                    htmlFor=\"password\"\n                    $validate={\n                      (errors.password === 'Please enter your password' &&\n                        touched.password &&\n                        'empty') ||\n                      (((errors.password && touched.password) || noUser) &&\n                        'error') ||\n                      (touched.password && 'okay')\n                    }\n                  >\n                    Password\n                  </Styledlabel>\n                  <StyledContainerPassword $validate={\n                    (errors.password === 'Please enter your password' &&\n                      touched.password &&\n                      'empty') ||\n                    (errors.password && touched.password && 'error') ||\n                    (touched.password && 'okay')\n                  }>\n                    <StyledFieldPassword\n                      name=\"password\"\n                      type={!visibility ? \"password\" : \"text\"}\n                      placeholder=\"• • • • • • •\"\n                    />\n                    <StyledButtonVisibility type=\"button\" onClick={() => { setVisibility(!visibility) }}>\n                      <ThemeProvider theme={theme}>\n                        {!visibility ? <Visibility color=\"primary\" /> : <VisibilityOff color=\"primary\" />}\n                      </ThemeProvider>\n                    </StyledButtonVisibility>\n                  </StyledContainerPassword>\n                  {(errors.password === 'Please enter your password' &&\n                    touched.password && (\n                      <StyledRequired>{errors.password}</StyledRequired>\n                    )) ||\n                    (errors.password &&\n                      errors.password.includes(\n                        'password must match the following'\n                      ) &&\n                      touched.password && (\n                        <StyledError>\n                          This password should contain at least eight characters\n                          and at least one number and one letter\n                        </StyledError>\n                      )) ||\n                    (errors.password && touched.password && (\n                      <StyledError>{errors.password}</StyledError>\n                    )) ||\n                    (noUser && (\n                      <StyledError>Email or password is uncorrect</StyledError>\n                    )) || (touched.password &&\n                      <StyledCorrect>This is an CORRECT password</StyledCorrect>)}\n                </StyledFormDiv>\n                <StyledButton type=\"submit\">\n                  Log In\n                  <SVG.LoginWhiteIcon />\n                </StyledButton>\n              </StyledForm>\n            );\n          }\n        }}\n      </Formik>\n    </StyledContainer>\n  );\n};\n\nexport default LoginForm;\n","import styled from 'styled-components';\n\nexport const StyledLayout = styled.div`\n  margin: 0 auto;\n  width: 100%;\n  padding: 155px 15px 156px 15px;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background: #dcebf7;\n  @media (min-width: 768px) {\n    padding-top: 227px;\n  }\n  @media (min-width: 1440px) {\n    padding-top: 124px;\n  }\n`;","import { AuthNavigate } from 'components/authNavigate/AuthNavigate';\nimport LoginForm from 'components/registerLoginForm/LoginForm';\nimport { StyledLayout } from './LoginPage.styled';\n\nconst LoginPage = () => {\n  return (\n    <StyledLayout>\n      <LoginForm />\n      <AuthNavigate path=\"/register\" text=\"Sign Up\"/>\n    </StyledLayout>\n      \n  );\n};\n\nexport default LoginPage;"],"names":["theme","createTheme","palette","primary","main","LoginSchema","Yup","shape","email","required","matches","password","min","navigate","useNavigate","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","noUser","setNoUser","_useState3","_useState4","visibility","setVisibility","_useState5","_useState6","isLoading","setIsLoading","_jsxs","StyledContainer","children","_jsx","StyledHeader","Formik","initialValues","validateOnChange","validateOnBlur","validationSchema","onSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","_ref","resetForm","response","wrap","_context","prev","next","login","sent","meta","requestStatus","payload","includes","t0","alert","stop","_x","_x2","apply","arguments","_ref3","errors","touched","Loader","StyledForm","StyledFormDiv","Styledlabel","htmlFor","$validate","StyledField","name","type","placeholder","StyledRequired","StyledError","StyledCorrect","StyledContainerPassword","StyledFieldPassword","StyledButtonVisibility","onClick","ThemeProvider","VisibilityOff","color","Visibility","StyledButton","SVG","StyledLayout","styled","_templateObject","_taggedTemplateLiteral","LoginForm","AuthNavigate","path","text"],"sourceRoot":""}