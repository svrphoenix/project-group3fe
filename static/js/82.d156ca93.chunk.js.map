{"version":3,"file":"static/js/82.d156ca93.chunk.js","mappings":"4SAqBMA,EAAcC,EAAAA,KAAaC,MAAM,CACrCC,MAAOF,EAAAA,KACJE,MAAM,0BACNC,SAAS,2BACTC,QAAQ,mCACXC,SAAUL,EAAAA,KACPM,IAAI,EAAG,mCACPH,SAAS,8BACTC,QAAQ,8CAqJb,EAlJkB,WAChB,IAAMG,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACjBC,GAA4BC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAApCI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GAExB,OACEI,EAAAA,EAAAA,MAACC,EAAAA,GAAe,CAAAC,SAAA,EACdC,EAAAA,EAAAA,KAACC,EAAAA,GAAY,CAAAF,SAAC,YACdC,EAAAA,EAAAA,KAACE,EAAAA,GAAM,CACLC,cAAe,CACbrB,MAAO,GACPG,SAAU,IAEZmB,kBAAkB,EAClBC,gBAAgB,EAChBC,iBAAkB3B,EAClB4B,SAAQ,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAE,SAAAC,EAAOC,EAAMC,GAAA,IAAAC,EAAAC,EAAA,OAAAN,EAAAA,EAAAA,KAAAO,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAAa,OAATL,EAASD,EAATC,UAASG,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAET/B,GACrBgC,EAAAA,EAAAA,IAAM,CACJvC,MAAO+B,EAAO/B,MACdG,SAAU4B,EAAO5B,YAEnB,KAAD,EACmC,cAN9B+B,EAAQE,EAAAI,MAMDC,KAAKC,eAChBT,IACA5B,EAAS,iCAEL6B,EAASS,QAAQC,SAAS,QAC5B9B,GAAU,GAEbsB,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAS,GAAAT,EAAA,SAEDU,MAAM,4BAA4B,yBAAAV,EAAAW,OAAA,GAAAjB,EAAA,kBAErC,gBAAAkB,EAAAC,GAAA,OAAAvB,EAAAwB,MAAA,KAAAC,UAAA,EAnBO,GAmBNlC,SAED,SAAAmC,GAA0B,IAAvBC,EAAMD,EAANC,OAAQC,EAAOF,EAAPE,QACV,OACEvC,EAAAA,EAAAA,MAACwC,EAAAA,GAAU,CAAAtC,SAAA,EACTF,EAAAA,EAAAA,MAACyC,EAAAA,GAAa,CAAAvC,SAAA,EACZC,EAAAA,EAAAA,KAACuC,EAAAA,GAAW,CACVC,QAAQ,QACRC,WACoB,4BAAjBN,EAAOrD,OACNsD,EAAQtD,MACR,SACCqD,EAAOrD,QACU,2BAAjBqD,EAAOrD,OACNqD,EAAOrD,MAAM4C,SAAS,WACxB/B,IACA,UACDyC,EAAQtD,OAAS,OACnBiB,SACF,WAGDC,EAAAA,EAAAA,KAAC0C,EAAAA,GAAW,CACVC,KAAK,QACLC,KAAK,QACLC,YAAY,mBACZJ,WACoB,4BAAjBN,EAAOrD,OACNsD,EAAQtD,MACR,SACCqD,EAAOrD,QACU,2BAAjBqD,EAAOrD,OACNqD,EAAOrD,MAAM4C,SAAS,WACxB/B,IACA,UACDyC,EAAQtD,OAAS,SAGH,4BAAjBqD,EAAOrD,OACPsD,EAAQtD,QACNkB,EAAAA,EAAAA,KAAC8C,EAAAA,GAAc,CAAA/C,SAAEoC,EAAOrD,SAEzBqD,EAAOrD,QACY,2BAAjBqD,EAAOrD,OACNqD,EAAOrD,MAAM4C,SAAS,YACtB1B,EAAAA,EAAAA,KAAC+C,EAAAA,GAAW,CAAAhD,SAAC,4BAEhBJ,IACCK,EAAAA,EAAAA,KAAC+C,EAAAA,GAAW,CAAAhD,SAAC,uCAGnBF,EAAAA,EAAAA,MAACyC,EAAAA,GAAa,CAAAvC,SAAA,EACZC,EAAAA,EAAAA,KAACuC,EAAAA,GAAW,CACVC,QAAQ,WACRC,WACuB,+BAApBN,EAAOlD,UACNmD,EAAQnD,SACR,SACCkD,EAAOlD,UAAYmD,EAAQnD,UAAaU,IACzC,UACDyC,EAAQnD,UAAY,OACtBc,SACF,cAGDC,EAAAA,EAAAA,KAACgD,EAAAA,GAAwB,CACvBL,KAAK,WACLC,KAAK,WACLC,YAAY,6CACZJ,WACuB,+BAApBN,EAAOlD,UACNmD,EAAQnD,SACR,SACCkD,EAAOlD,UAAYmD,EAAQnD,UAAaU,IACzC,UACDyC,EAAQnD,UAAY,SAGH,+BAApBkD,EAAOlD,UACPmD,EAAQnD,WACNe,EAAAA,EAAAA,KAAC8C,EAAAA,GAAc,CAAA/C,SAAEoC,EAAOlD,YAEzBkD,EAAOlD,UACNkD,EAAOlD,SAASyC,SACd,sCAEFU,EAAQnD,WACNe,EAAAA,EAAAA,KAAC+C,EAAAA,GAAW,CAAAhD,SAAC,mGAKhBoC,EAAOlD,UAAYmD,EAAQnD,WAC1Be,EAAAA,EAAAA,KAAC+C,EAAAA,GAAW,CAAAhD,SAAEoC,EAAOlD,YAEtBU,IACCK,EAAAA,EAAAA,KAAC+C,EAAAA,GAAW,CAAAhD,SAAC,uCAGnBF,EAAAA,EAAAA,MAACoD,EAAAA,GAAY,CAACL,KAAK,SAAQ7C,SAAA,CAAC,UAE1BC,EAAAA,EAAAA,KAACkD,EAAAA,EAAAA,eAAkB,SAI3B,MAIR,E,SC9KaC,E,QAAeC,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,kTCYtC,EAVkB,WAChB,OACEzD,EAAAA,EAAAA,MAACsD,EAAY,CAAApD,SAAA,EACXC,EAAAA,EAAAA,KAACuD,EAAS,KACVvD,EAAAA,EAAAA,KAACwD,EAAAA,EAAY,CAACC,KAAK,YAAYC,KAAK,cAI1C,C","sources":["components/registerLoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.styled.jsx","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import React from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { useState } from 'react';\nimport {\n  StyledButton,\n  StyledContainer,\n  StyledError,\n  StyledField,\n  StyledFieldPasswordLogin,\n  StyledForm,\n  StyledFormDiv,\n  StyledHeader,\n  Styledlabel,\n  StyledRequired,\n} from './RegisterLoginForm.styled';\nimport { login } from 'redux/auth/operations';\nimport { SVG } from 'images';\n\nconst LoginSchema = Yup.object().shape({\n  email: Yup.string()\n    .email('This is an ERROR email')\n    .required('Please enter your email')\n    .matches(/^[a-z0-9.]+@[a-z]+\\.[a-z]{2,3}$/),\n  password: Yup.string()\n    .min(8, 'Need to be more than 8 symbols!')\n    .required('Please enter your password')\n    .matches(/^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,30}$/),\n});\n\nconst LoginForm = () => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const [noUser, setNoUser] = useState(false);\n\n  return (\n    <StyledContainer>\n      <StyledHeader>Log In</StyledHeader>\n      <Formik\n        initialValues={{\n          email: '',\n          password: '',\n        }}\n        validateOnChange={false}\n        validateOnBlur={true}\n        validationSchema={LoginSchema}\n        onSubmit={async (values, { resetForm }) => {\n          try {\n            const response = await dispatch(\n              login({\n                email: values.email,\n                password: values.password,\n              })\n            );\n            if (response.meta.requestStatus !== 'rejected') {\n              resetForm();\n              navigate('/calendar/month/:currentDate');\n            } else {\n              if (response.payload.includes('401')) {\n                setNoUser(true);\n              }\n            }\n          } catch (error) {\n            alert('Sorry, problem at server');\n          }\n        }}\n      >\n        {({ errors, touched }) => {\n          return (\n            <StyledForm>\n              <StyledFormDiv>\n                <Styledlabel\n                  htmlFor=\"email\"\n                  $validate={\n                    (errors.email === 'Please enter your email' &&\n                      touched.email &&\n                      'empty') ||\n                    (((errors.email &&\n                      (errors.email === 'This is an ERROR email' ||\n                        errors.email.includes('match'))) ||\n                      noUser) &&\n                      'error') ||\n                    (touched.email && 'okay')\n                  }\n                >\n                  Email\n                </Styledlabel>\n                <StyledField\n                  name=\"email\"\n                  type=\"email\"\n                  placeholder=\"nadiia@gmail.com\"\n                  $validate={\n                    (errors.email === 'Please enter your email' &&\n                      touched.email &&\n                      'empty') ||\n                    (((errors.email &&\n                      (errors.email === 'This is an ERROR email' ||\n                        errors.email.includes('match'))) ||\n                      noUser) &&\n                      'error') ||\n                    (touched.email && 'okay')\n                  }\n                />\n                {(errors.email === 'Please enter your email' &&\n                  touched.email && (\n                    <StyledRequired>{errors.email}</StyledRequired>\n                  )) ||\n                  (errors.email &&\n                    (errors.email === 'This is an ERROR email' ||\n                      errors.email.includes('match')) && (\n                      <StyledError>This is an ERROR email</StyledError>\n                    )) ||\n                  (noUser && (\n                    <StyledError>Email or password is uncorrect</StyledError>\n                  ))}\n              </StyledFormDiv>\n              <StyledFormDiv>\n                <Styledlabel\n                  htmlFor=\"password\"\n                  $validate={\n                    (errors.password === 'Please enter your password' &&\n                      touched.password &&\n                      'empty') ||\n                    (((errors.password && touched.password) || noUser) &&\n                      'error') ||\n                    (touched.password && 'okay')\n                  }\n                >\n                  Password\n                </Styledlabel>\n                <StyledFieldPasswordLogin\n                  name=\"password\"\n                  type=\"password\"\n                  placeholder=\"•••••••\"\n                  $validate={\n                    (errors.password === 'Please enter your password' &&\n                      touched.password &&\n                      'empty') ||\n                    (((errors.password && touched.password) || noUser) &&\n                      'error') ||\n                    (touched.password && 'okay')\n                  }\n                />\n                {(errors.password === 'Please enter your password' &&\n                  touched.password && (\n                    <StyledRequired>{errors.password}</StyledRequired>\n                  )) ||\n                  (errors.password &&\n                    errors.password.includes(\n                      'password must match the following'\n                    ) &&\n                    touched.password && (\n                      <StyledError>\n                        This password should contain at least eight characters\n                        and at least one number and one letter\n                      </StyledError>\n                    )) ||\n                  (errors.password && touched.password && (\n                    <StyledError>{errors.password}</StyledError>\n                  )) ||\n                  (noUser && (\n                    <StyledError>Email or password is uncorrect</StyledError>\n                  ))}\n              </StyledFormDiv>\n              <StyledButton type=\"submit\">\n                Log In\n                <SVG.LoginWhiteIcon />\n              </StyledButton>\n            </StyledForm>\n          );\n        }}\n      </Formik>\n    </StyledContainer>\n  );\n};\n\nexport default LoginForm;\n","import styled from 'styled-components';\n\nexport const StyledLayout = styled.div`\n  margin: 0 auto;\n  width: 100%;\n  padding: 155px 15px 156px 15px;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background: #dcebf7;\n  @media (min-width: 768px) {\n    padding-top: 227px;\n  }\n  @media (min-width: 1440px) {\n    padding-top: 124px;\n  }\n`;","import { AuthNavigate } from 'components/authNavigate/AuthNavigate';\nimport LoginForm from 'components/registerLoginForm/LoginForm';\nimport { StyledLayout } from './LoginPage.styled';\n\nconst LoginPage = () => {\n  return (\n    <StyledLayout>\n      <LoginForm />\n      <AuthNavigate path=\"/register\" text=\"Sign Up\"/>\n    </StyledLayout>\n      \n  );\n};\n\nexport default LoginPage;"],"names":["LoginSchema","Yup","shape","email","required","matches","password","min","navigate","useNavigate","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","noUser","setNoUser","_jsxs","StyledContainer","children","_jsx","StyledHeader","Formik","initialValues","validateOnChange","validateOnBlur","validationSchema","onSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","_ref","resetForm","response","wrap","_context","prev","next","login","sent","meta","requestStatus","payload","includes","t0","alert","stop","_x","_x2","apply","arguments","_ref3","errors","touched","StyledForm","StyledFormDiv","Styledlabel","htmlFor","$validate","StyledField","name","type","placeholder","StyledRequired","StyledError","StyledFieldPasswordLogin","StyledButton","SVG","StyledLayout","styled","_templateObject","_taggedTemplateLiteral","LoginForm","AuthNavigate","path","text"],"sourceRoot":""}